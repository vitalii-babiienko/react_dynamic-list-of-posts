{"version":3,"sources":["components/UserSelector/DropDownList/DropDownList.tsx","components/UserSelector/DropDownTrigger/DropDownTrigger.tsx","utils/fetchClient.ts","api/users.ts","context/UsersContext/UsersContext.tsx","components/UserSelector/UserSelector.tsx","context/PostsContext/PostsContext.tsx","api/posts.ts","components/Loader/Loader.tsx","components/MainContent/PostsList/PostItem/PostItem.tsx","components/MainContent/PostsList/PostsList.tsx","components/MainContent/MainContent.tsx","api/comments.ts","context/CommentsContext/CommentsContext.tsx","components/NewCommentForm/ErrorMessage/ErrorMessage.tsx","components/NewCommentForm/BodyField/BodyField.tsx","components/NewCommentForm/ErrorTriangle/ErrorTriangle.tsx","components/NewCommentForm/EmailInput/EmailInput.tsx","components/NewCommentForm/FormButtons/FormButtons.tsx","components/NewCommentForm/NameInput/NameInput.tsx","components/NewCommentForm/NewCommentForm.tsx","components/Sidebar/PostComments/PostComments.tsx","components/Sidebar/PostDetails/PostDetails.tsx","components/Sidebar/Sidebar.tsx","App.tsx","index.tsx"],"names":["DropDownList","names","selectedUserName","chooseUser","className","id","role","map","user","index","isActive","name","href","classNames","onClick","DropDownTrigger","handleDropDown","type","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getUsers","a","users","UsersContext","createContext","selectedUserId","UsersUpdateContext","handleUserNameSelection","UsersProvider","children","useState","setUsers","setSelectedUserName","setSelectedUserId","getUsersFromServer","useCallback","usersFromServer","Error","useEffect","contextValue","contextUpdateValue","Provider","value","UserSelector","memo","useContext","isShown","setIsShown","useMemo","current","PostsContext","userPosts","hasError","isLoading","selectedPost","handlePostSelection","PostsProvider","setUserPosts","setSelectedPost","setHasError","setIsLoading","getPostsFromServer","postsFromServer","post","Loader","PostItem","title","isSelected","handlePostView","PostsList","MainContent","hasNoSelectedUser","isNoPosts","length","isPosts","removeComment","commentId","CommentsContext","comments","addCommentToServer","removeCommentFromServer","CommentsProvider","setComments","getCommentsFromServer","postId","commentsFromServer","newComment","comment","tempComment","filter","ErrorMessage","BodyField","isBodyValid","handleBodyChange","htmlFor","placeholder","onChange","ErrorTriangle","EmailInput","email","isEmail","isEmailValid","handleEmailInput","invalid","FormButtons","shouldClear","handleReset","NameInput","isNameValid","handleNameInput","emailPattern","NewCommentForm","setName","setIsNameValid","setEmail","setIsEmail","setIsEmailValid","setBody","setIsBodyValid","event","target","handleSubmit","canSubmit","preventDefault","trim","test","onSubmit","PostComments","PostDetails","hasButton","setHasButton","isNoComments","isComments","isButton","isForm","handleFormShow","Sidebar","shoudBeShown","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58baa7ea.chunk.js","sourcesContent":["import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Names } from '../../../types/Names';\n\ntype Props = {\n  names: Names[];\n  selectedUserName: string;\n  chooseUser: (name: string, id: number) => void;\n};\n\nexport const DropDownList: FC<Props> = ({\n  names,\n  selectedUserName,\n  chooseUser,\n}) => {\n  return (\n    <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n      <div className=\"dropdown-content\">\n        {names && names.map((user, index) => {\n          const isActive = user.name === selectedUserName;\n\n          return (\n            <a\n              key={user.id}\n              href={`#user-${index + 1}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': isActive },\n              )}\n              onClick={() => chooseUser(user.name, user.id)}\n            >\n              {user.name}\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\n\ntype Props = {\n  selectedUserName: string;\n  handleDropDown: () => void;\n};\n\nexport const DropDownTrigger: FC<Props> = ({\n  selectedUserName,\n  handleDropDown,\n}) => {\n  return (\n    <div className=\"dropdown-trigger\">\n      <button\n        type=\"button\"\n        className=\"button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"dropdown-menu\"\n        onClick={handleDropDown}\n      >\n        <span>\n          {selectedUserName}\n        </span>\n\n        <span className=\"icon is-small\">\n          <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n        </span>\n      </button>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = async () => {\n  const users = await client.get<User[]>('/users');\n\n  return users || null;\n};\n","import {\n  FC,\n  useState,\n  useEffect,\n  useCallback,\n  createContext,\n} from 'react';\n\nimport { getUsers } from '../../api/users';\nimport { User } from '../../types/User';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype Context = {\n  users: User[] | null;\n  selectedUserName: string;\n  selectedUserId: number;\n};\n\ntype UpdateContext = {\n  handleUserNameSelection: (name: string, id: number) => void;\n};\n\nexport const UsersContext = createContext<Context>({\n  users: null,\n  selectedUserName: 'Choose a user',\n  selectedUserId: 0,\n});\n\nexport const UsersUpdateContext = createContext<UpdateContext>({\n  handleUserNameSelection: () => {},\n});\n\nexport const UsersProvider: FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [selectedUserName, setSelectedUserName] = useState('Choose a user');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const getUsersFromServer = useCallback(async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch (error) {\n      throw new Error('Unable to load users from the server!');\n    }\n  }, []);\n\n  const handleUserNameSelection = useCallback(\n    (name: string, id: number) => {\n      setSelectedUserName(() => name);\n      setSelectedUserId(() => id);\n    }, [],\n  );\n\n  useEffect(() => {\n    getUsersFromServer();\n  }, []);\n\n  const contextValue = {\n    users,\n    selectedUserName,\n    selectedUserId,\n  };\n\n  const contextUpdateValue = {\n    handleUserNameSelection,\n  };\n\n  return (\n    <UsersContext.Provider value={contextValue}>\n      <UsersUpdateContext.Provider value={contextUpdateValue}>\n        {children}\n      </UsersUpdateContext.Provider>\n    </UsersContext.Provider>\n  );\n};\n","import {\n  FC,\n  useState,\n  useCallback,\n  useContext,\n  useMemo,\n  memo,\n} from 'react';\n\nimport { DropDownList } from './DropDownList';\nimport { DropDownTrigger } from './DropDownTrigger';\nimport { UsersContext, UsersUpdateContext } from '../../context/UsersContext';\n\nexport const UserSelector: FC = memo(() => {\n  const { users, selectedUserName } = useContext(UsersContext);\n  const { handleUserNameSelection } = useContext(UsersUpdateContext);\n  const [isShown, setIsShown] = useState(false);\n\n  const names = useMemo(\n    () => users?.map(({ name, id }) => {\n      return {\n        name,\n        id,\n      };\n    }), [users],\n  );\n\n  const handleDropDown = useCallback(() => (\n    setIsShown((current) => !current)\n  ), []);\n\n  const chooseUser = useCallback(async (name: string, id: number) => {\n    handleUserNameSelection(name, id);\n    setIsShown((current) => !current);\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <DropDownTrigger\n        selectedUserName={selectedUserName}\n        handleDropDown={handleDropDown}\n      />\n\n      {isShown && names\n        && (\n          <DropDownList\n            names={names}\n            selectedUserName={selectedUserName}\n            chooseUser={chooseUser}\n          />\n        )}\n    </div>\n  );\n});\n","import {\n  FC,\n  useState,\n  useEffect,\n  useCallback,\n  createContext,\n  useContext,\n} from 'react';\n\nimport { getPosts } from '../../api/posts';\nimport { Post } from '../../types/Post';\nimport { UsersContext } from '../UsersContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype Context = {\n  userPosts: Post[] | null;\n  hasError: boolean;\n  isLoading: boolean;\n  selectedPost: Post | null;\n  handlePostSelection: (post: Post | null) => void;\n};\n\nexport const PostsContext = createContext<Context>({\n  userPosts: null,\n  hasError: false,\n  isLoading: false,\n  selectedPost: null,\n  handlePostSelection: () => {},\n});\n\nexport const PostsProvider: FC<Props> = ({ children }) => {\n  const { selectedUserId } = useContext(UsersContext);\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getPostsFromServer = useCallback(async () => {\n    try {\n      setHasError(false);\n      setIsLoading(true);\n\n      const postsFromServer = await getPosts(selectedUserId);\n\n      setUserPosts(postsFromServer);\n      setIsLoading(false);\n    } catch (error) {\n      setHasError(true);\n      setIsLoading(false);\n      throw new Error('Unable to load user posts!');\n    }\n  }, [selectedUserId]);\n\n  const handlePostSelection = useCallback((post: Post | null) => {\n    setSelectedPost((current) => {\n      if (current && current.id === post?.id) {\n        return null;\n      }\n\n      return post;\n    });\n  }, []);\n\n  useEffect(() => {\n    setUserPosts(null);\n    setSelectedPost(null);\n\n    if (selectedUserId !== 0) {\n      getPostsFromServer();\n    }\n  }, [selectedUserId]);\n\n  const contextValue = {\n    userPosts,\n    selectedPost,\n    hasError,\n    isLoading,\n    handlePostSelection,\n  };\n\n  return (\n    <PostsContext.Provider value={contextValue}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import {\n  FC,\n  memo,\n  useCallback,\n  useContext,\n  useMemo,\n} from 'react';\n\nimport classNames from 'classnames';\nimport { Post } from '../../../../types/Post';\nimport { PostsContext } from '../../../../context/PostsContext';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostItem: FC<Props> = memo(({ post }) => {\n  const {\n    selectedPost,\n    handlePostSelection,\n  } = useContext(PostsContext);\n\n  const { id, title } = post;\n\n  const isSelected = useMemo(() => (\n    id === selectedPost?.id\n  ), [selectedPost]);\n\n  const handlePostView = useCallback(() => {\n    if (id === selectedPost?.id) {\n      handlePostSelection(null);\n    } else {\n      handlePostSelection(post);\n    }\n  }, [selectedPost]);\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">\n        {id}\n      </td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames(\n            'button is-link',\n            { 'is-light': !isSelected },\n          )}\n          onClick={handlePostView}\n        >\n          {isSelected\n            ? 'Close'\n            : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n});\n","import {\n  FC,\n  memo,\n  useContext,\n} from 'react';\n\nimport { PostsContext } from '../../../context/PostsContext';\nimport { PostItem } from './PostItem';\n\nexport const PostsList: FC = memo(() => {\n  const { userPosts } = useContext(PostsContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table\n        className=\"\n          table\n          is-fullwidth\n          is-striped\n          is-hoverable\n          is-narrow\n        \"\n      >\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts && userPosts.map((post) => (\n            <PostItem key={post.id} post={post} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import {\n  FC,\n  memo,\n  useContext,\n  useMemo,\n} from 'react';\n\nimport { Loader } from '../Loader';\nimport { PostsList } from './PostsList';\nimport { PostsContext } from '../../context/PostsContext';\nimport { UsersContext } from '../../context/UsersContext';\n\nexport const MainContent: FC = memo(() => {\n  const { selectedUserName } = useContext(UsersContext);\n  const {\n    userPosts,\n    hasError,\n    isLoading,\n  } = useContext(PostsContext);\n\n  const hasNoSelectedUser = useMemo(\n    () => selectedUserName === 'Choose a user',\n    [selectedUserName],\n  );\n\n  const isNoPosts = useMemo(\n    () => userPosts?.length === 0 && !hasNoSelectedUser && !isLoading,\n    [userPosts, isLoading],\n  );\n\n  const isPosts = useMemo(\n    () => userPosts?.length !== 0 && !hasNoSelectedUser && !isLoading,\n    [userPosts, isLoading],\n  );\n\n  return (\n    <div className=\"block\" data-cy=\"MainContent\">\n      {hasNoSelectedUser && (\n        <p data-cy=\"NoSelectedUser\">\n          No user selected\n        </p>\n      )}\n\n      {isLoading && <Loader />}\n\n      {hasError && (\n        <div\n          className=\"notification is-danger\"\n          data-cy=\"PostsLoadingError\"\n        >\n          Something went wrong!\n        </div>\n      )}\n\n      {isNoPosts && (\n        <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n          No posts yet\n        </div>\n      )}\n\n      {isPosts && <PostsList />}\n    </div>\n  );\n});\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (postId: number, comment: Comment) => {\n  return client.post<Comment>(`/comments?postId=${postId}`, comment);\n};\n\nexport const removeComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import {\n  FC,\n  useState,\n  useEffect,\n  useCallback,\n  createContext,\n  useContext,\n} from 'react';\n\nimport {\n  getComments,\n  addComment,\n  removeComment,\n} from '../../api/comments';\n\nimport { Comment } from '../../types/Comment';\nimport { PostsContext } from '../PostsContext';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype Context = {\n  comments: Comment[] | null;\n  hasError: boolean;\n  isLoading: boolean;\n  addCommentToServer: (tempComment: Comment) => void;\n  removeCommentFromServer: (commentId: number) => void;\n};\n\nexport const CommentsContext = createContext<Context>({\n  comments: null,\n  hasError: false,\n  isLoading: false,\n  addCommentToServer: () => {},\n  removeCommentFromServer: () => {},\n});\n\nexport const CommentsProvider: FC<Props> = ({ children }) => {\n  const { selectedPost } = useContext(PostsContext);\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getCommentsFromServer = useCallback(async () => {\n    if (selectedPost) {\n      try {\n        setHasError(false);\n        setIsLoading(true);\n\n        const commentsFromServer = await getComments(selectedPost.id);\n\n        setComments(commentsFromServer);\n        setIsLoading(false);\n      } catch (error) {\n        setHasError(true);\n        setIsLoading(false);\n        throw new Error('Unable to get post comments!');\n      }\n    }\n  }, [selectedPost]);\n\n  const addCommentToServer = useCallback(async (newComment: Comment) => {\n    if (selectedPost) {\n      try {\n        setHasError(false);\n\n        const tempComment = await addComment(selectedPost.id, newComment);\n\n        setComments((current) => (current && tempComment\n          ? [...current, tempComment]\n          : [tempComment]));\n      } catch (error) {\n        setHasError(true);\n        throw new Error('Unable to add a post comment!');\n      }\n    }\n  }, [selectedPost]);\n\n  const removeCommentFromServer = useCallback(async (commentId: number) => {\n    if (selectedPost) {\n      try {\n        setHasError(false);\n\n        setComments((current) => (\n          current?.filter((comment) => comment.id !== commentId) || null\n        ));\n\n        await removeComment(commentId);\n      } catch (error) {\n        setHasError(true);\n        throw new Error('Unable to remove a post comment!');\n      }\n    }\n  }, [selectedPost]);\n\n  useEffect(() => {\n    setComments(null);\n\n    if (selectedPost !== null) {\n      getCommentsFromServer();\n    }\n  }, [selectedPost]);\n\n  const contextValue = {\n    comments,\n    hasError,\n    isLoading,\n    addCommentToServer,\n    removeCommentFromServer,\n  };\n\n  return (\n    <CommentsContext.Provider value={contextValue}>\n      {children}\n    </CommentsContext.Provider>\n  );\n};\n","import { FC } from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const ErrorMessage: FC<Props> = ({ children }) => {\n  return (\n    <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n      {children}\n    </p>\n  );\n};\n","import {\n  FC,\n  memo,\n} from 'react';\n\nimport classNames from 'classnames';\nimport { ErrorMessage } from '../ErrorMessage';\n\ntype Props = {\n  body: string;\n  isBodyValid: boolean;\n  handleBodyChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void;\n};\n\nexport const BodyField: FC<Props> = memo(({\n  body,\n  isBodyValid,\n  handleBodyChange,\n}) => {\n  return (\n    <div className=\"field\" data-cy=\"BodyField\">\n      <label className=\"label\" htmlFor=\"comment-body\">\n        Comment Text\n      </label>\n\n      <div className=\"control\">\n        <textarea\n          id=\"comment-body\"\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className={classNames(\n            'textarea',\n            { 'is-danger': !isBodyValid },\n          )}\n          value={body}\n          onChange={handleBodyChange}\n        />\n      </div>\n\n      {!isBodyValid && (\n        <ErrorMessage>\n          Enter some text!\n        </ErrorMessage>\n      )}\n    </div>\n  );\n});\n","import { FC } from 'react';\n\nexport const ErrorTriangle: FC = () => {\n  return (\n    <span\n      className=\"icon is-small is-right has-text-danger\"\n      data-cy=\"ErrorIcon\"\n    >\n      <i className=\"fas fa-exclamation-triangle\" />\n    </span>\n  );\n};\n","import {\n  FC,\n  memo,\n  useMemo,\n} from 'react';\n\nimport classNames from 'classnames';\nimport { ErrorMessage } from '../ErrorMessage';\nimport { ErrorTriangle } from '../ErrorTriangle';\n\ntype Props = {\n  email: string;\n  isEmail: boolean;\n  isEmailValid: boolean;\n  handleEmailInput: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const EmailInput: FC<Props> = memo(({\n  email,\n  isEmail,\n  isEmailValid,\n  handleEmailInput,\n}) => {\n  const invalid = useMemo(\n    () => !isEmail || !isEmailValid,\n    [isEmail, isEmailValid],\n  );\n\n  return (\n    <div className=\"field\" data-cy=\"EmailField\">\n      <label className=\"label\" htmlFor=\"comment-author-email\">\n        Author Email\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          id=\"comment-author-email\"\n          placeholder=\"email@test.com\"\n          className={classNames(\n            'input',\n            { 'is-danger': invalid },\n          )}\n          value={email}\n          onChange={handleEmailInput}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className=\"fas fa-envelope\" />\n        </span>\n\n        {invalid && <ErrorTriangle />}\n      </div>\n\n      {!isEmail && (\n        <ErrorMessage>\n          Email is required!\n        </ErrorMessage>\n      )}\n\n      {!isEmailValid && (\n        <ErrorMessage>\n          You have entered an invalid email address!\n        </ErrorMessage>\n      )}\n    </div>\n  );\n});\n","import {\n  FC,\n  memo,\n} from 'react';\n\nimport classNames from 'classnames';\n\ntype Props = {\n  isLoading: boolean;\n  shouldClear: string;\n  handleReset: () => void;\n};\n\nexport const FormButtons: FC<Props> = memo(({\n  isLoading,\n  shouldClear,\n  handleReset,\n}) => {\n  return (\n    <div className=\"field is-grouped\">\n      <div className=\"control\">\n        <button\n          type=\"submit\"\n          className={classNames(\n            'button is-link',\n            { 'is-loading': isLoading },\n          )}\n        >\n          Add\n        </button>\n      </div>\n\n      <div className=\"control\">\n        {shouldClear && (\n          <button\n            type=\"button\"\n            className=\"button is-link is-light\"\n            aria-label=\"reset\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        )}\n      </div>\n    </div>\n  );\n});\n","import {\n  FC,\n  memo,\n} from 'react';\n\nimport classNames from 'classnames';\nimport { ErrorTriangle } from '../ErrorTriangle';\nimport { ErrorMessage } from '../ErrorMessage';\n\ntype Props = {\n  name: string;\n  isNameValid: boolean;\n  handleNameInput: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport const NameInput: FC<Props> = memo(({\n  name,\n  isNameValid,\n  handleNameInput,\n}) => {\n  return (\n    <div className=\"field\" data-cy=\"NameField\">\n      <label className=\"label\" htmlFor=\"comment-author-name\">\n        Author Name\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"comment-author-name\"\n          placeholder=\"Name Surname\"\n          className={classNames(\n            'input',\n            { 'is-danger': !isNameValid },\n          )}\n          value={name}\n          onChange={handleNameInput}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className=\"fas fa-user\" />\n        </span>\n\n        {!isNameValid && <ErrorTriangle />}\n      </div>\n\n      {!isNameValid && (\n        <ErrorMessage>\n          Name is required!\n        </ErrorMessage>\n      )}\n    </div>\n  );\n});\n","import {\n  FC,\n  useState,\n  useCallback,\n  useContext,\n  useMemo,\n} from 'react';\n\nimport { Comment } from '../../types/Comment';\nimport { CommentsContext } from '../../context/CommentsContext';\nimport { PostsContext } from '../../context/PostsContext';\nimport { BodyField } from './BodyField';\nimport { EmailInput } from './EmailInput';\nimport { FormButtons } from './FormButtons';\nimport { NameInput } from './NameInput';\n\nexport const emailPattern = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(.\\w{2,3})+$/;\n\nexport const NewCommentForm: FC = () => {\n  const { addCommentToServer } = useContext(CommentsContext);\n  const { selectedPost } = useContext(PostsContext);\n  const [isLoading, setIsLoading] = useState(false);\n  const [name, setName] = useState('');\n  const [isNameValid, setIsNameValid] = useState(true);\n  const [email, setEmail] = useState('');\n  const [isEmail, setIsEmail] = useState(true);\n  const [isEmailValid, setIsEmailValid] = useState(true);\n  const [body, setBody] = useState('');\n  const [isBodyValid, setIsBodyValid] = useState(true);\n\n  const shouldClear = useMemo(() => (\n    name || email || body\n  ), [name, email, body]);\n\n  const handleNameInput = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setName(event.target.value);\n      setIsNameValid(true);\n    }, [],\n  );\n\n  const handleEmailInput = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setEmail(event.target.value);\n      setIsEmail(true);\n      setIsEmailValid(true);\n    }, [],\n  );\n\n  const handleBodyChange = useCallback(\n    (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setBody(event.target.value);\n      setIsBodyValid(true);\n    }, [],\n  );\n\n  const handleReset = useCallback(() => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setIsEmail(true);\n    setIsNameValid(true);\n    setIsEmailValid(true);\n    setIsBodyValid(true);\n  }, []);\n\n  const handleSubmit = useCallback(\n    async (event: React.FormEvent<HTMLFormElement>) => {\n      let canSubmit = true;\n\n      event.preventDefault();\n      setIsLoading(() => true);\n\n      if (!name.trim()) {\n        setIsNameValid(false);\n        canSubmit = false;\n      }\n\n      if (!email.trim()) {\n        setIsEmail(false);\n        canSubmit = false;\n      }\n\n      if (!emailPattern.test(email)) {\n        setIsEmailValid(false);\n        canSubmit = false;\n      }\n\n      if (!body.trim()) {\n        setIsBodyValid(false);\n        canSubmit = false;\n      }\n\n      if (canSubmit && selectedPost) {\n        const newComment: Comment = {\n          id: 0,\n          postId: selectedPost.id,\n          name,\n          email,\n          body,\n        };\n\n        await addCommentToServer(newComment);\n        setBody('');\n      }\n\n      setIsLoading(() => false);\n    }, [name, email, body],\n  );\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <NameInput\n        name={name}\n        isNameValid={isNameValid}\n        handleNameInput={handleNameInput}\n      />\n\n      <EmailInput\n        email={email}\n        isEmail={isEmail}\n        isEmailValid={isEmailValid}\n        handleEmailInput={handleEmailInput}\n      />\n\n      <BodyField\n        body={body}\n        isBodyValid={isBodyValid}\n        handleBodyChange={handleBodyChange}\n      />\n\n      <FormButtons\n        isLoading={isLoading}\n        shouldClear={shouldClear}\n        handleReset={handleReset}\n      />\n    </form>\n  );\n};\n","import {\n  FC,\n  useContext,\n  memo,\n} from 'react';\n\nimport { CommentsContext } from '../../../context/CommentsContext';\n\nexport const PostComments: FC = memo(() => {\n  const { comments, removeCommentFromServer } = useContext(CommentsContext);\n\n  return (\n    <>\n      {comments && (\n        <p className=\"title is-4\">\n          Comments:\n        </p>\n      )}\n\n      {comments && comments.map((comment) => {\n        const {\n          id,\n          email,\n          body,\n          name,\n        } = comment;\n\n        return (\n          <article\n            className=\"message is-small\"\n            data-cy=\"Comment\"\n            key={id}\n          >\n            <div className=\"message-header\">\n              <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                {name}\n              </a>\n\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n                onClick={() => removeCommentFromServer(id)}\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {body}\n            </div>\n          </article>\n        );\n      })}\n    </>\n  );\n});\n","import {\n  FC,\n  useState,\n  useEffect,\n  useCallback,\n  useContext,\n  useMemo,\n  memo,\n} from 'react';\n\nimport { CommentsContext } from '../../../context/CommentsContext';\nimport { Loader } from '../../Loader';\nimport { NewCommentForm } from '../../NewCommentForm';\nimport { PostsContext } from '../../../context/PostsContext';\nimport { PostComments } from '../PostComments';\n\nexport const PostDetails: FC = memo(() => {\n  const {\n    comments,\n    hasError,\n    isLoading,\n  } = useContext(CommentsContext);\n\n  const { selectedPost } = useContext(PostsContext);\n  const [hasButton, setHasButton] = useState(true);\n\n  const isNoComments = useMemo(\n    () => comments?.length === 0 && !isLoading,\n    [comments, isLoading],\n  );\n\n  const isComments = useMemo(\n    () => comments?.length !== 0 && !isLoading,\n    [comments, isLoading],\n  );\n\n  const isButton = useMemo(\n    () => hasButton && !isLoading,\n    [hasButton, isLoading],\n  );\n\n  const isForm = useMemo(\n    () => !hasButton && !isLoading,\n    [hasButton, isLoading],\n  );\n\n  const handleFormShow = useCallback(() => (\n    setHasButton(false)\n  ), []);\n\n  useEffect(() => (\n    setHasButton(true)\n  ), []);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {selectedPost\n              ? `#${selectedPost.id}: ${selectedPost.title}`\n              : ''}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {hasError && (\n            <div\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong!\n            </div>\n          )}\n\n          {isNoComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isComments && <PostComments />}\n\n          {isButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleFormShow}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isForm && <NewCommentForm />}\n      </div>\n    </div>\n  );\n});\n","import {\n  FC,\n  memo,\n  useContext,\n  useMemo,\n} from 'react';\n\nimport classNames from 'classnames';\nimport { PostsContext } from '../../context/PostsContext';\nimport { PostDetails } from './PostDetails';\n\nexport const Sidebar: FC = memo(() => {\n  const { selectedPost, isLoading } = useContext(PostsContext);\n  const shoudBeShown = useMemo(\n    () => selectedPost !== null && !isLoading,\n    [selectedPost, isLoading],\n  );\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        { 'Sidebar--open': shoudBeShown },\n      )}\n    >\n      <div className=\"tile is-child box is-success\">\n        {shoudBeShown && <PostDetails />}\n      </div>\n    </div>\n  );\n});\n","import { FC } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { UserSelector } from './components/UserSelector';\nimport { PostsProvider } from './context/PostsContext';\nimport { MainContent } from './components/MainContent';\nimport { CommentsProvider } from './context/CommentsContext';\nimport { Sidebar } from './components/Sidebar';\n\nexport const App: FC = () => {\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <PostsProvider>\n          <div className=\"tile is-ancestor\">\n            <div className=\"tile is-parent\">\n              <div className=\"tile is-child box is-success\">\n                <div className=\"block\">\n                  <UserSelector />\n                </div>\n\n                <MainContent />\n              </div>\n            </div>\n\n            <CommentsProvider>\n              <Sidebar />\n            </CommentsProvider>\n          </div>\n        </PostsProvider>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { UsersProvider } from './context/UsersContext';\n\nReactDOM.render(\n  <UsersProvider>\n    <App />\n  </UsersProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}